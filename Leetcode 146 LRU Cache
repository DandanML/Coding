class LRUCache {
public:
    LRUCache(int capacity) {
        capacity_ = capacity;        
    }
    
    int get(int key) {
        unordered_map<int, list<pair<int, int>>::iterator>::iterator get_key = caches_map_.find(key);
        if (get_key == caches_map_.end()) return -1;
        //note to change the position of this key in the list after "get".
        caches_.splice(caches_.end(), caches_, get_key->second);
        return get_key->second->second;
    }
    
    void put(int key, int value) {
        unordered_map<int, list<pair<int, int>>::iterator>::iterator get_key = caches_map_.find(key);
        if (get_key!=caches_map_.end()) {
            get_key->second->second = value;
            caches_.splice(caches_.end(), caches_, get_key->second);
        } else{
            if (capacity_ <= 0) { //need to remove the least frequent removed one.
                int key_remove  = caches_.begin()->first;
                caches_map_.erase(key_remove);
                caches_.erase(caches_.begin());
                capacity_ ++;
            }
            caches_.push_back(make_pair(key, value));
            caches_map_[key] = --caches_.end();
            capacity_--;
        }
        return;        
    }
private:
    unordered_map<int, list<pair<int, int>>::iterator> caches_map_;
    list<pair<int, int>> caches_; //the node in the list has two element: one is the key, and the other is value. key is used to find the corresponding position in the caches_map and erase it. 
    int capacity_;
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
