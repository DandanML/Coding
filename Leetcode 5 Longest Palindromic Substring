1), Dynanmic programming solution. 

class Solution {
public:
    string longestPalindrome(string s) {
        bool dp[s.size()][s.size()];
        int max = 0;
        string res = "";
        for (int j = 0; j < s.size(); j++) { //j represents the ending position of the substring. 
            for (int i = 0; i <= j; i++){
                dp[i][j] = (s[i]==s[j]) && ((i+1 > j-1) || dp[i+1][j-1]);
                if (dp[i][j] && j - i + 1 > max){
                    max = j - i + 1;
                    res = s.substr(i, j - i + 1);
                }
            }
        }
        return res;
    }
};

2). middle point check.  The key is to start with s[i] and s[i] for odd center, and s[i], s[i+1] for even center to avoid all the border condition check.

class Solution {
public:
       string longestPalindrome(string s) {
       if (s.size()==0 || s.size()==1) return s;
       int max = 0;
       string res = "";
       for (int i = 0; i < s.size(); i++) {
           
           //first check if the substring is odd and s[i] is in the middle.
           checkpalindrom (s, i, i, max, res);

           //second check if the substring is even and s[i] and s[i+1] is in the middle.
           checkpalindrom (s, i, i+1, max, res);
       }
       return res;
    }
private:
    void checkpalindrom(string s, int left, int right, int& max, string& res) {
        int j = left;
        int k = right; 
       // for ( ; j >= 0 && k < s.size(); j--, k++){
       //     if (s[j] != s[k]) break;
       // }
        while (j >= 0 && k < s.size() && s[j]==s[k]){
            j--;
            k++;
        }
        
        int temp = k - j - 1; // k-1 - (j + 1) +1;
        if (temp > max) {
            max = temp;
            res = s.substr(j+1, max);
         }
        return;
    }
};
