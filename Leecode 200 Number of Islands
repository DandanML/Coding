class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        if (grid.size() == 0) return 0;
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n,false));
        int res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!visited[i][j] && grid[i][j] == '1'){
                    res ++;
                    dfs(i, j, m, n, grid, visited);
                }
            }
        }     
        return res;
    }
    void dfs(int i, int j, int m, int n, vector<vector<char>>& grid, vector<vector<bool>>& visited) {
        if (visited[i][j]) return;
        visited[i][j] = true;
        if (j+1<n && grid[i][j+1] == '1') dfs(i, j+1, m, n, grid, visited);
        if (i+1<m && grid[i+1][j] == '1') dfs(i+1, j, m, n, grid, visited);
        if (i-1>=0 && grid[i-1][j] == '1') dfs(i-1, j, m, n, grid, visited);
        if (j-1>=0 && grid[i][j-1] == '1') dfs(i, j-1, m, n, grid, visited);
        return;
    }
};
