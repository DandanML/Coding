Solution 1: time complexity: O(N^2);
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        if (root == NULL || (root->left == NULL && root->right ==NULL) ) return true;
        return isBalanced(root->left) && isBalanced(root->right) && (abs(heightTree(root->left) - heightTree(root->right)) <= 1);          
    }
private:
    int heightTree(TreeNode* root) {
        if (root == NULL) return 0;
        int lheight = heightTree(root->left);
        int rheight = heightTree(root->right);
        int height = max(lheight, rheight) + 1;
        return height;
    }
};

Solution 2: Time complexity: O(N)
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        if (root == NULL || (root->left == NULL && root->right ==NULL) ) return true;
        int height = 0;
        return heightTree(root, height);
    }
private:
    bool heightTree(TreeNode* root, int& height) {
        if (root == NULL) {
            height = 0;
            return true;
        }
        int lheight = 0;
        int rheight = 0;
        bool lh = heightTree(root->left, lheight);
        if (!lh) return false;
        bool rh = heightTree(root->right, rheight);
        if (!rh) return false;
        if (abs(lheight - rheight) > 1) return false;
        height = max(lheight, rheight) + 1;
        return true;
    }
};
