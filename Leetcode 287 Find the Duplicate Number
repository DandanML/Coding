
Solution 1): hash set. but this one use O(n) extra space. 
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        //hash set. O(n) extra space
        unordered_set<int> set;
        for (auto num: nums){
            if (set.count(num)==0) set.insert(num);
            else return num;
        }
    }
};

Solution 2): This one only works if there is only one duplicate.
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
       //mathematical solution if only one duplicate.
      // without the duplicate, the sum = 1+2+3+...+n = n*(n+1)/2;
      //with duplication, sum = 1+2+3+...+n+duplicate* = n*(n+1)/2 + duplicate.
      int sum = 0;
      for (auto num:nums){
          sum += num;
      }
      int n = nums.size()-1;
      int ans = sum - n*(n+1)/2;
      return ans;
    }
};
