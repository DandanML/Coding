Solution 1: Using queue (extra space of O(N)).
/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
public:
    void connect(TreeLinkNode *root) {
        if (root == NULL) return;
        queue<TreeLinkNode* > nodequeue;
        nodequeue.push(root);
        TreeLinkNode* temp;
        TreeLinkNode* pre; 
        while (!nodequeue.empty()) {
            int level_size = nodequeue.size();
            pre = NULL; //rest pre to NULL at the beginning of the level.
            for (int i = 0; i < level_size; ++i) {
                temp = nodequeue.front();
                temp->next = pre;
                if (temp->right!=NULL) nodequeue.push(temp->right);
                if (temp->left!=NULL) nodequeue.push(temp->left);
                pre = temp;
                nodequeue.pop();
            }
        }     
    }
};

Solution 2: constant extra space. The key is to use two pointers: one is representing the head of the next level and the other is to representing the current node.
class Solution {
public:
    void connect(TreeLinkNode *root) {
        if (root==NULL) return;
        TreeLinkNode *cur = root; //the pointer at current level.
        TreeLinkNode *head = NULL;
        TreeLinkNode *tail = NULL; //head and tail is the head and tail of next level.
        while(cur!=NULL){
            if(cur->left){//if head is NULL. this will be the head and also temporarily set tail. Tail can be updated depending on whether it has more nodes at this level. If head is not null, we only need to updat ethe tail. Next pointer is set while updating the tail.
                if (head == NULL) head = tail = cur->left;
                else {tail->next = cur->left; tail = cur->left;}
            }
            if (cur->right){
                if (head == NULL) head = tail = cur->right;
                else {tail->next = cur->right; tail = cur->right;}
            }
            if (cur->next==NULL) {//if this is the last node at this level. start the new level.
                cur = head;
                head = tail = NULL;
            } else{
              cur = cur->next;  
            } 
         }
        return;
    }
};
