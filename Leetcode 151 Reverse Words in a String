Solution 1). Using stack. Pay attention to the border condition.
class Solution {
public:
    void reverseWords(string &s) {
        stack<string> stack_string;
        for (int i=0; i<s.size();){
            string temp = "";
            for (;i<s.size(); i++){
                if (s[i]==' ' && temp!="") { //ending of a word
                    stack_string.push(temp);
                    break;
                }
                else if (s[i]!=' ') { 
                    temp = temp + s[i];
                    if (i==s.size()-1) //end of the string.
                        stack_string.push(temp);
                }
                else ; //if space, do thing. 
            }
        }
        s = "";
        while(stack_string.size()>1){
            s += stack_string.top();
            s += " ";
            stack_string.pop();
        }
        if (!stack_string.empty()) //last word in the stack if any.
            s += stack_string.top();
        return;        
    }
};
Space complexity: O(n), n is the number of words in the string.
Time complexity: O(n), n is the number of chars in the string.
