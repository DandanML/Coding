Solution 1:
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string> dict;
        for (auto word : wordDict) {
            dict.insert(word);
        }
        return wordBreakHelper(s, dict);

    }
private:
    bool wordBreakHelper(string s, unordered_set<string> dict) {
        bool res = false;
        for (int i = 0; i < s.size(); i++) {
            string substr1 = s.substr(0, i+1);
            string substr2 = s.substr(i+1);
            res  = (dict.count(substr1) == 1);
            if (res) {
                if (substr2.size() == 0) {
                    res = true;
                } else if (string_map_.count(substr2) == 1) {
                     res = string_map_[substr2];
                } else {
                    res = wordBreakHelper(substr2, dict);
                }
            }
            if (res) {
                string_map_[s] = true;
                return true;
            }
        } 
        string_map_[s] = false;
        return false;
    }
   unordered_map<string, bool> string_map_;
};

Solution 2:

class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        vector<bool> dp(s.length() + 1, false);
        dp[0] = true;
        unordered_set<string> wd;
        for(int i = 0; i < wordDict.size(); ++ i) {
            wd.insert(wordDict[i]);
        }
        for(int i = 0; i < s.length(); ++ i) {
            for(int j = i; j >= 0 && !dp[i + 1]; -- j) {
                dp[i + 1] = dp[j] && wd.find(s.substr(j, i - j + 1)) != wd.end();
            }
        }
        return dp[s.length()];
    }
};
