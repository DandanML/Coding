Three solutions provided.

Solution 1). Brute force
class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        vector<vector<string>> res;
        for (auto str: strs){
           int n = res.size();
           bool flag = false;
           for (int i=0; i<n; i++){
               if (validAnagrams(res[i][0], str)){
                  res[i].push_back(str);
                  flag = true;
                  break;
               }
           }
           if (!flag) {//not anagram with any strings in the array, create a new vector.
               vector<string> temp_str;
               temp_str.push_back(str);
               res.push_back(temp_str);
           }
        }
        return res;
    }
    bool validAnagrams(string strs1, string strs2){
        if (strs1.length()!=strs2.length()) return false;
        unordered_map<char, int> map_strs1;
        for (auto char_s:strs1){
            map_strs1[char_s]++;
        }
        for (auto char_s:strs2){
            if (map_strs1[char_s]==0) return false;
            else map_strs1[char_s]--;
        }
        return true;
    }
};
Time complexity: O(n*m), n is the number of strings, m is the number of groups. On top of it, there is time used to compare anagram for each string.
Space complexity: O(n)

Solution 2). Map & sort.
class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string, vector<string>> str_map;
        for (auto str: strs){
            string sorted_str = str;
            sort(sorted_str.begin(), sorted_str.end());
            str_map[sorted_str].push_back(str); //if the key does not exist, the string is pushed into an empty vector.
        }
        vector<vector<string>> res;
        for (auto it:str_map){
            res.push_back(it.second);
        }
        return res;
    }
};
Time complexity: O(n*Klog(K)), n is the number of strings, K is the lengh of the longest string, Klog(K) is due to sort. 
Space complexity: O(n). 

Solution 3).
class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string, vector<string>> str_map;
        for (auto str: strs){
            vector<int> count(26);
            for (auto char_str:str)
                count[char_str-'a']++;
            string key;
            for (int i=0; i<count.size(); i++){
                key += count[i];
                key += i+'a';
            }
            str_map[key].push_back(str); //if the key does not exist, the string is pushed into an empty vector.
        }
        vector<vector<string>> res;
        for (auto it:str_map){
            res.push_back(it.second);
        }
        return res;
    }
};
Time complexity: O(NK)
Space complexity: O(N)
